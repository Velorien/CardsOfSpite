@page "/Game/{gameId:guid}"

@using CardsOfSpite.Models
@inject Services.GameService GameService
@implements IAsyncDisposable

<div class="game">
    @if (GameService.ErrorMessage is not null)
    {
        <div class="box gameBox">
            <h2>Whoops...</h2>
            <p>An error has occurred: @GameService.ErrorMessage</p>
        </div>
    }
    else if (!GameService.Joined)
    {
        <div class="box gameBox">
            <h2>Join game</h2>
            <label>Your name</label>
            <input type="text" required @bind-value="_name" maxlength="15"/>
            <button @onclick="Join">Join</button>
        </div>
    }
    else if (GameService.Waiting)
    {
        <div class="waiting box gameBox">
            <h2>Waiting for game</h2>
            <div class="rotatingCard">
                <div class="cardLine1"></div>
                <div class="cardLine2"></div>
            </div>
            <div>
                <p>In queue:</p>
                <span>@string.Join(", ", GameService.PlayerQueue.Select(p => p.Name))</span>
            </div>
        </div>
    }
    else if (GameService.IsGameEnded)
    {
        <div class="box gameBox">
            <h2>Game ended</h2>
            <WinningSetView WinningSet="GameService.WinningSet" />
        </div>
    }
    else
    {
        <div class="board">
            <div class="gameStatus">
                <h3>Current card</h3>
                @if (GameService.BlackCard is not null)
                {
                    <BlackCardView Card="GameService.BlackCard" />
                }
                <h3>Players</h3>
                @foreach (var player in GameService.Players)
                {
                    bool isCzar = GameService.CzarId == player.Id;
                    <p class="@(isCzar ? "czar" : null)">
                        @(isCzar ? "👑 " : null)
                        @(GameService.SelectedCards.ContainsKey(player.Id) ? "✅ " : null)
                        @player.Name (@player.Points)
                        @(player.Id == GameService.PlayerId ? "(you!)" : null)
                    </p>
                }

                @if (GameService.WinningSet is not null)
                {
                    <h3>Winning set</h3>
                    <WinningSetView WinningSet="GameService.WinningSet" />
                }
            </div>
            <div class="cardArea">
                <h3>Selected cards</h3>
                <div class="playArea">
                    @if (GameService.SelectedCards.Any())
                    {
                        foreach (var selection in GameService.SelectedCards)
                        {
                            <div>
                                <div class="selection">
                                    @foreach (var card in selection.Value)
                                    {
                                        <div class="cardWrapper">
                                            <WhiteCardView Card="card" RevealTtext="GameService.CardsRevealed" />
                                        </div>
                                    }

                                </div>
                                @if (GameService.CardsRevealed && GameService.IsCzar)
                                {
                                    <button @onclick="() => GameService.SelectWinner(selection.Key)">Award point</button>
                                }
                            </div>
                        }
                    }
                </div>

                <PlayerMessage />

                @if (GameService.CurrentSelection.Any())
                {
                    <h3>Your selection</h3>
                    <div class="hand">
                        @foreach (var card in GameService.CurrentSelection)
                        {
                            <WhiteCardView Card="card" OnClick="CardClicked" />
                        }
                        @if (GameService.CurrentSelection.Count == GameService.BlackCard!.Pick)
                        {
                            <button @onclick="GameService.ConfirmSelection">Confirm selection</button>
                        }
                    </div>
                }
                <h3>Your hand</h3>
                <div class="hand @GetHandClass()">
                    @foreach (var card in GameService.Hand)
                    {
                        <WhiteCardView Card="card" OnClick="CardClicked"
                            CssClass="@(GameService.CurrentSelection.Contains(card) ? "selected" : null)" />
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    string _name = string.Empty;
    [Parameter] public Guid GameId { get; set; }

    public ValueTask DisposeAsync() => GameService.DisposeAsync();

    protected override void OnInitialized()
    {
        GameService.StateChanged += StateHasChanged;
    }

    string? GetHandClass() => GameService.IsCzar || !GameService.CardsRevealed && !GameService.CanSelectCards || GameService.CardsRevealed
    ? "disabled" : null;

    Task Join()
    {
        if (string.IsNullOrWhiteSpace(_name)) return Task.CompletedTask;
        return GameService.Join(GameId, _name);
    }

    void CardClicked(WhiteCard card)
    {
        if (!GameService.CanSelectCards) return;

        var cs = GameService.CurrentSelection;
        if (cs.Contains(card)) cs.Remove(card);
        else if (cs.Count < GameService.BlackCard!.Pick) cs.Add(card);
    }
}
